{"version":3,"file":"static/js/637.2643eaa3.chunk.js","mappings":"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","sources":["webpack://movie-catalog/./src/pages/Movies/styles.module.css?65fd","pages/Movies/SortingSelect.tsx","pages/Movies/GenresSelect.tsx","pages/Movies/SelectedGenres.tsx","pages/Movies/Movies.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movie_page\":\"styles_movie_page__7y5+G\",\"movie_page__wrapper\":\"styles_movie_page__wrapper__ykPYr\",\"movie_page__header\":\"styles_movie_page__header__q3tSt\",\"movie_page__title\":\"styles_movie_page__title__glze7\",\"movie_page__filters\":\"styles_movie_page__filters__ddY16\",\"selected_genres\":\"styles_selected_genres__kriG0\",\"select_container\":\"styles_select_container__vEYJ5\",\"selected_genre\":\"styles_selected_genre__UXUJT\",\"select_genre\":\"styles_select_genre__9HQXm\",\"select_sort\":\"styles_select_sort__i+TrD\",\"resultNotFound\":\"styles_resultNotFound__MkJpA\",\"need_more_data\":\"styles_need_more_data__BQ62R\"};","import { Dispatch, FC, SetStateAction } from \"react\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { clearMoviesList } from \"../../store/moviesSlice\";\r\nimport { sortByList } from \"../../utils/constants\";\r\nimport styles from \"./styles.module.css\";\r\n\r\ntype SortingSelectProps = {\r\n  sortBy: string;\r\n  setSortBy: Dispatch<SetStateAction<string>>;\r\n  setMoviesPage: Dispatch<SetStateAction<number>>;\r\n};\r\n\r\nexport const SortingSelect: FC<SortingSelectProps> = ({ sortBy, setSortBy, setMoviesPage }) => {\r\n  const appDispatch = useAppDispatch();\r\n\r\n  const sortingClick = (sortingType: string) => {\r\n    if (sortingType !== sortBy) {\r\n      appDispatch(clearMoviesList());\r\n      setMoviesPage(1);\r\n      setSortBy(sortingType);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <select name=\"sorting\" className={styles.select_sort}>\r\n      {sortByList.map((sort, index) => {\r\n        return (\r\n          <option\r\n            key={index}\r\n            value={sort.value}\r\n            onClick={() => {\r\n              sortingClick(sort.value);\r\n            }}>\r\n            {sort.name}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n","import { Dispatch, SetStateAction } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { Genres } from \"../../services/Genres\";\r\nimport { clearMoviesList } from \"../../store/moviesSlice\";\r\nimport { addSelectedGenre } from \"../../store/selectedGenresSlice\";\r\nimport styles from \"./styles.module.css\";\r\n\r\ntype GenresSelectProps = {\r\n  setMoviesPage: Dispatch<SetStateAction<number>>;\r\n};\r\n\r\nexport const GenresSelect = ({ setMoviesPage }: GenresSelectProps) => {\r\n  const appDispatch = useAppDispatch();\r\n  const genres = Genres.allGenres()\r\n  const selectedGenres = useAppSelector((state) => state.selectedGenres.selectedGenres);\r\n  return (\r\n    <select name=\"genre\" className={styles.select_genre}>\r\n      {genres.map((genre, index) => {\r\n        if (!selectedGenres.includes(genre.id)) {\r\n          return (\r\n            <option\r\n              key={index}\r\n              value={genre.id}\r\n              onClick={() => {\r\n                appDispatch(addSelectedGenre(genre.id));\r\n                appDispatch(clearMoviesList());\r\n                setMoviesPage(1);\r\n              }}>\r\n              {genre.name}\r\n            </option>\r\n          );\r\n        }\r\n      })}\r\n    </select>\r\n  );\r\n};\r\n","import { Dispatch, FC, SetStateAction } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { Genres } from \"../../services/Genres\";\r\nimport { clearMoviesList } from \"../../store/moviesSlice\";\r\nimport { removeSelectedGenre } from \"../../store/selectedGenresSlice\";\r\nimport styles from \"./styles.module.css\";\r\n\r\nexport const SelectedGenres: FC<{\r\n  setMoviesPage: Dispatch<SetStateAction<number>>;\r\n}> = ({ setMoviesPage }) => {\r\n  const appDispatch = useAppDispatch();\r\n  const genres = Genres.allGenres();\r\n\r\n  const selectedGenres = useAppSelector((state) => state.selectedGenres.selectedGenres);\r\n  const getGenreNameById = (genreId: number): string | undefined => {\r\n    const genreName = genres.find((genre) => genre.id === genreId)?.name;\r\n    return genreName;\r\n  };\r\n\r\n  return (\r\n    <div className={styles.selected_genres}>\r\n      {selectedGenres.map((selectedGenre, index) => (\r\n        <span\r\n          key={index}\r\n          className={styles.selected_genre}\r\n          onClick={() => {\r\n            appDispatch(removeSelectedGenre(selectedGenre));\r\n            appDispatch(clearMoviesList());\r\n            setMoviesPage(1);\r\n          }}>\r\n          {getGenreNameById(selectedGenre)}\r\n        </span>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import { FC, useState, useEffect } from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks\";\r\nimport { clearMoviesList, getMoviesForRedux } from \"../../store/moviesSlice\";\r\nimport { SortingSelect } from \"./SortingSelect\";\r\nimport { GenresSelect } from \"./GenresSelect\";\r\nimport { SelectedGenres } from \"./SelectedGenres\";\r\nimport { LazyLoadMovies } from \"../../components/LazyLoadMovies/LazyLoadMovies\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport styles from \"./styles.module.css\";\r\n\r\nconst Movies: FC = () => {\r\n  const appDispatch = useAppDispatch();\r\n  const selectedGenres = useAppSelector((state) => state.selectedGenres.selectedGenres);\r\n  const movies = useAppSelector((state) => state.movies.movies);\r\n  const morePages = useAppSelector((state) => state.movies.morePages);\r\n\r\n  const [moviesPage, setMoviesPage] = useState(1);\r\n  const [sortBy, setSortBy] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    appDispatch(clearMoviesList());\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    appDispatch(\r\n      getMoviesForRedux({\r\n        genres: [...selectedGenres],\r\n        pagesId: moviesPage,\r\n        sortBy,\r\n      })\r\n    );\r\n  }, [selectedGenres, moviesPage, sortBy]);\r\n\r\n  return (\r\n    <main className={styles.movie_page}>\r\n      <div className={styles.movie_page__wrapper}>\r\n        <div className={styles.movie_page__header}>\r\n          <div className={styles.movie_page__title}>Explore Movies</div>\r\n          <div className={styles.movie_page__filters}>\r\n            <SelectedGenres setMoviesPage={setMoviesPage} />\r\n            <div className={styles.select_container}>\r\n              <GenresSelect setMoviesPage={setMoviesPage} />\r\n              <SortingSelect sortBy={sortBy} setSortBy={setSortBy} setMoviesPage={setMoviesPage} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <InfiniteScroll\r\n          dataLength={movies.length}\r\n          next={() => {\r\n            setMoviesPage((moviesPage) => moviesPage + 1);\r\n          }}\r\n          hasMore={morePages}\r\n          loader={<div className={styles.need_more_data}>Loading ...</div>}>\r\n          <LazyLoadMovies movies={movies} />\r\n        </InfiniteScroll>\r\n\r\n        {movies.length === 0 ? (\r\n          <div className={styles.resultNotFound}>Sorry, Results not found!</div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n"],"names":["SortingSelect","_ref","sortBy","setSortBy","setMoviesPage","appDispatch","useAppDispatch","_jsx","name","className","styles","children","sortByList","sort","index","value","onClick","sortingType","clearMoviesList","GenresSelect","genres","Genres","selectedGenres","useAppSelector","state","map","genre","includes","id","addSelectedGenre","SelectedGenres","getGenreNameById","genreId","_genres$find","find","selectedGenre","removeSelectedGenre","movies","morePages","_useState","useState","_useState2","_slicedToArray","moviesPage","_useState3","_useState4","useEffect","window","scrollTo","getMoviesForRedux","_toConsumableArray","pagesId","_jsxs","InfiniteScroll","dataLength","length","next","hasMore","loader","LazyLoadMovies"],"sourceRoot":""}